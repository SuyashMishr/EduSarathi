#!/usr/bin/env python3
"""
Comprehensive test script for all subjects in both languages
"""

import requests
import json
import time

def test_health():
    """Test service health"""
    try:
        response = requests.get("http://localhost:8001/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Service is healthy:", response.json())
            return True
        else:
            print("‚ùå Health check failed:", response.status_code)
            return False
    except Exception as e:
        print("‚ùå Health check failed:", str(e))
        return False

def test_subject_quiz(subject_en, subject_hi, topic_en, topic_hi, language):
    """Test quiz generation for a specific subject"""
    url = "http://localhost:8001/quiz/generate"
    
    if language.lower() in ["hi", "hindi"]:
        quiz_request = {
            "subject": subject_hi,
            "topic": topic_hi,
            "grade": 11,
            "questionCount": 2,
            "difficulty": "easy",
            "questionTypes": ["mcq"],
            "language": language
        }
    else:
        quiz_request = {
            "subject": subject_en,
            "topic": topic_en,
            "grade": 11,
            "questionCount": 2,
            "difficulty": "easy",
            "questionTypes": ["mcq"],
            "language": language
        }
    
    try:
        print(f"\nüß™ Testing {subject_en} Quiz in {language.upper()}")
        print("=" * 50)
        print(f"Request: {json.dumps(quiz_request, indent=2, ensure_ascii=False)}")
        
        response = requests.post(url, json=quiz_request, timeout=30)
        
        if response.status_code == 200:
            quiz_data = response.json()
            print(f"‚úÖ Success! Generated quiz in {language}")
            print(f"üìù Quiz Title: {quiz_data.get('title', 'N/A')}")
            print(f"üåê Language: {quiz_data.get('language', 'N/A')}")
            print(f"üìä Questions: {len(quiz_data.get('questions', []))}")
            
            # Show first question as sample
            questions = quiz_data.get('questions', [])
            if questions:
                first_q = questions[0]
                print(f"\nüìã Sample Question:")
                print(f"   Question: {first_q.get('question', 'N/A')}")
                print(f"   Type: {first_q.get('type', 'N/A')}")
                if first_q.get('options'):
                    print(f"   Options: {first_q.get('options')}")
                print(f"   Answer: {first_q.get('correct_answer', 'N/A')}")
                
                # Check language content
                question_text = first_q.get('question', '')
                if language.lower() in ["hi", "hindi"]:
                    has_hindi = any('\u0900' <= char <= '\u097F' for char in question_text)
                    print(f"   ‚úÖ Hindi Content: {'Yes' if has_hindi else 'No'}")
                else:
                    has_english = any('a' <= char.lower() <= 'z' for char in question_text)
                    print(f"   ‚úÖ English Content: {'Yes' if has_english else 'No'}")
            
            return True
        else:
            print(f"‚ùå HTTP Error {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False

def main():
    print("üöÄ Starting Comprehensive EduSarathi Subject Tests")
    print("=" * 60)
    
    # Test health first
    print("\nüè• Testing Health Check")
    print("=" * 50)
    if not test_health():
        print("‚ùå Service not healthy, stopping tests")
        return
    
    # Define subjects to test
    subjects = [
        ("Physics", "‡§≠‡•å‡§§‡§ø‡§ï ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®", "Motion in a Straight Line", "‡§∏‡§∞‡§≤ ‡§∞‡•á‡§ñ‡§æ ‡§Æ‡•á‡§Ç ‡§ó‡§§‡§ø"),
        ("Chemistry", "‡§∞‡§∏‡§æ‡§Ø‡§® ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®", "Structure of Atom", "‡§™‡§∞‡§Æ‡§æ‡§£‡•Å ‡§ï‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ"),
        ("Mathematics", "‡§ó‡§£‡§ø‡§§", "Sets", "‡§∏‡§Æ‡•Å‡§ö‡•ç‡§ö‡§Ø"),
        ("Biology", "‡§ú‡•Ä‡§µ ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®", "The Living World", "‡§ú‡•Ä‡§µ ‡§ú‡§ó‡§§"),
        ("Economics", "‡§Ö‡§∞‡•ç‡§•‡§∂‡§æ‡§∏‡•ç‡§§‡•ç‡§∞", "Introduction to Economics", "‡§Ö‡§∞‡•ç‡§•‡§∂‡§æ‡§∏‡•ç‡§§‡•ç‡§∞ ‡§ï‡§æ ‡§™‡§∞‡§ø‡§ö‡§Ø")
    ]
    
    languages = ["en", "hi"]
    
    results = []
    
    for subject_en, subject_hi, topic_en, topic_hi in subjects:
        for language in languages:
            success = test_subject_quiz(subject_en, subject_hi, topic_en, topic_hi, language)
            results.append((f"{subject_en} ({language.upper()})", success))
            time.sleep(2)  # Small delay between tests
    
    # Summary
    print("\nüìä Test Summary")
    print("=" * 50)
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüéØ Overall: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! System is ready for production.")
    else:
        print("‚ö†Ô∏è  Some tests failed. Check the logs above.")

if __name__ == "__main__":
    main()
